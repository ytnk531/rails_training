# frozen_string_literal: true

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe ProfilesController, type: :controller do
  describe 'GET #show' do
    it 'returns a success response' do
      p = create(:profile)
      get :show, params: { id: p.id }, session: {user_id: p.user_id}
      expect(response).to be_successful
    end
  end

  describe 'GET #new' do
    it 'returns a success response' do
      u = create(:user)
      get :new, params: {}, session: {user_id: u.id}
      expect(response).to be_successful
    end
  end

  describe 'GET #show_mine' do
    context 'user have a profile' do
      it 'respond the user\'s profile' do
        p = create(:profile)
        get :show_mine, params: {}, session: {user_id: p.user_id}
        expect(response).to be_successful
      end
    end
    context 'user still not have a profile' do
      it 'respond redirect to new profile view' do
        u = create(:user)
        get :show_mine, params: {}, session: {user_id: u.id}
        expect(response).to redirect_to(new_profile_path)
      end
    end
  end

  describe 'GET #edit' do
    context 'own profile' do
      it 'returns a success response' do
        p = create(:profile)
        get :edit, params: { id: p.id }, session: {user_id: p.user_id}
        expect(response).to be_successful
      end
    end
    context 'other user profile' do
      it 'returns a success response' do
        p1 = create(:profile)
        p2 = create(:profile)
        get :edit, params: { id: p1.id }, session: {user_id: p2.user_id}
        expect(response).to redirect_to(users_path)
      end
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new Profile' do
        user = create(:user)
        expect do
          post :create, params: { profile: attributes_for(:profile, user: user) }, session: {user_id: user.id}
        end.to change(Profile, :count).by(1)
      end

      it 'redirects to the created profile' do
        user = create(:user)
        post :create, params: { profile: attributes_for(:profile, user: user) }, session: {user_id: user.id}
        expect(response).to redirect_to(Profile.last)
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      it 'redirects to the profile' do
        profile = create(:profile)
        put :update,
            params: { id: profile.to_param, profile: attributes_for(:profile, id: profile.id, message:"new message") },
            session: {user_id: profile.user_id}
        expect(response).to redirect_to(profile)
      end
    end
  end
end
